define("local_overflow/rating",["exports","core/ajax","core/prefetch","core/str"],(function(_exports,_ajax,_prefetch,_str){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Implements rating functionality
   *
   * @module     local_overflow/rating
   * @copyright  2022 Justus Dieckmann WWU
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=function(userid,allowmultiplemarks){_prefetch.default.prefetchStrings("local_overflow",["marksolved","marknotsolved","markhelpful","marknothelpful","action_remove_upvote","action_upvote","action_remove_downvote","action_downvote"]),root.onclick=async event=>{const actionElement=event.target.closest("[data-overflow-action]");if(!actionElement)return;const action=actionElement.getAttribute("data-overflow-action"),postElement=actionElement.closest("[data-overflow-postid]"),postid=null==postElement?void 0:postElement.getAttribute("data-overflow-postid");switch(action){case"upvote":case"downvote":{const isupvote="upvote"===action;if("clicked"===actionElement.getAttribute("data-overflow-state"))await sendVote(postid,isupvote?20:10,userid),actionElement.setAttribute("data-overflow-state","notclicked"),actionElement.title=await(0,_str.get_string)("action_"+action,"local_overflow");else{const otherAction=isupvote?"downvote":"upvote";await sendVote(postid,isupvote?2:1,userid),actionElement.setAttribute("data-overflow-state","clicked");const otherElement=postElement.querySelector('[data-overflow-action="'.concat(otherAction,'"]'));otherElement.setAttribute("data-overflow-state","notclicked"),actionElement.title=await(0,_str.get_string)("action_remove_"+action,"local_overflow"),otherElement.title=await(0,_str.get_string)("action_"+otherAction,"local_overflow")}}break;case"helpful":case"solved":{const isHelpful="helpful"===action,htmlclass=isHelpful?"markedhelpful":"markedsolution",shouldRemove=postElement.classList.contains(htmlclass),baseRating=isHelpful?4:3,rating=shouldRemove?10*baseRating:baseRating;if(await sendVote(postid,rating,userid),allowmultiplemarks)shouldRemove&&(postElement.classList.remove(htmlclass),actionElement.textContent=await(0,_str.get_string)("mark".concat(action),"local_overflow"),changeStrings(htmlclass,action));else for(const el of root.querySelectorAll(".overflowpost."+htmlclass))el.classList.remove(htmlclass),el.querySelector('[data-overflow-action="'.concat(action,'"]')).textContent=await(0,_str.get_string)("mark".concat(action),"local_overflow");shouldRemove||(postElement.classList.add(htmlclass),actionElement.textContent=await(0,_str.get_string)("marknot".concat(action),"local_overflow"),allowmultiplemarks&&changeStrings(htmlclass,action))}}}},_ajax=_interopRequireDefault(_ajax),_prefetch=_interopRequireDefault(_prefetch);const root=document.getElementById("overflow-root");async function sendVote(postid,rating,userid){const response=await _ajax.default.call([{methodname:"local_overflow_record_vote",args:{postid:postid,ratingid:rating}}])[0];return root.querySelectorAll('[data-overflow-userreputation="'.concat(userid,'"]')).forEach((i=>{i.textContent=response.raterreputation})),root.querySelectorAll('[data-overflow-userreputation="'.concat(response.ownerid,'"]')).forEach((i=>{i.textContent=response.ownerreputation})),root.querySelectorAll('[data-overflow-postreputation="'.concat(postid,'"]')).forEach((i=>{i.textContent=response.postrating})),response}async function changeStrings(htmlclass,action){_prefetch.default.prefetchStrings("local_overflow",["marksolved","alsomarksolved","markhelpful","alsomarkhelpful"]);var othermarkedposts=!1;for(const el of root.querySelectorAll(".overflowpost"))if(el.classList.contains(htmlclass)){othermarkedposts=!0;break}for(const el of root.querySelectorAll(".overflowpost"))!el.classList.contains(htmlclass)&&el.querySelector('[data-overflow-action="'.concat(action,'"]'))&&(el.querySelector('[data-overflow-action="'.concat(action,'"]')).textContent=othermarkedposts?await(0,_str.get_string)("alsomark".concat(action),"local_overflow"):await(0,_str.get_string)("mark".concat(action),"local_overflow"))}}));

//# sourceMappingURL=rating.min.js.map